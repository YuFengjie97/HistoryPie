var S=Object.defineProperty;var T=(o,s,c)=>s in o?S(o,s,{enumerable:!0,configurable:!0,writable:!0,value:c}):o[s]=c;var i=(o,s,c)=>T(o,typeof s!="symbol"?s+"":s,c);(function(){"use strict";class o{constructor(e){i(this,"hostname");i(this,"enterTime");i(this,"leaveTime",0);i(this,"lastTime",0);const n=new Date().getTime();this.hostname=e,this.enterTime=n}async handleEnter(){const e=new Date().getTime();this.enterTime=e}async handleLeave(){const e=new Date().getTime();this.lastTime=e;const n=this.lastTime-this.enterTime,a=g(n);await this.updateStorage(a)}async getStorageTotalSeconds(){const e=await c(this.hostname);if(e===null)return 0;const{totalSeconds:n}=e;return n}async updateStorage(e){const a=await this.getStorageTotalSeconds()+e;s(this.hostname,{hostname:this.hostname,lastTime:this.lastTime,totalSeconds:a})}}async function s(t,e){return new Promise((n,a)=>{chrome.storage.local.set({[t]:e},()=>n("success"))})}async function c(t){return new Promise((e,n)=>{chrome.storage.local.get(t??null,a=>{Object.keys(a).length===0?e(null):e(t?a[t]:a)})})}function d(){return c()}function m(){return new Promise((t,e)=>{chrome.storage.local.clear(()=>{t("clear success")})})}function g(t){return t/1e3}function f(t){try{const{protocol:e,hostname:n}=new URL(t);return["https:","http"].includes(e)?n:null}catch{return null}}function u(){return new Promise((t,e)=>{chrome.tabs.query({active:!0,currentWindow:!0},n=>{let a=(n[0]&&n[0].url)??"";const w=f(a);t({hostname:w,url:a})})})}const r={};let l=null;async function h(){var e;l&&((e=r[l])==null||e.handleLeave());const{hostname:t}=await u();t!==null&&(r[t]?r[t].handleEnter():r[t]=new o(t)),l=t}chrome.tabs.onActivated.addListener(async({tabId:t})=>{console.log("tab Active   "),await h()}),chrome.tabs.onRemoved.addListener(async t=>{var n;console.log("tab Remove  ");const{hostname:e}=await u();e&&((n=r[e])==null||n.handleLeave())}),chrome.tabs.onUpdated.addListener(async(t,e,n)=>{e.status==="complete"&&(console.log("tab Update  "),await h())}),chrome.runtime.onMessage.addListener((t,e,n)=>(t.type==="getHostMap"&&n({data:r}),t.type==="getStorage"&&d().then(a=>{n({data:a})}),t.type==="clearStorage"&&m().then(a=>{n({data:"success"})}),!0))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmFja2dyb3VuZC91dGlscy50cyIsIi4uLy4uLy4uL3NyYy9iYWNrZ3JvdW5kL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSG9zdExpZmVTdG9yYWdlIHtcbiAgaG9zdG5hbWU6IHN0cmluZ1xuICBsYXN0VGltZTogbnVtYmVyXG4gIHRvdGFsU2Vjb25kczogbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBIb3N0TGlmZSB7XG4gIGhvc3RuYW1lOiBzdHJpbmdcbiAgLy8g5Zyo5LiA5qyh6K6/6Zeu5LitKOWkhOS6juW9k+WJjeato+WcqOa0u+i3g+eahOagh+etvumhteaXtinnmoTotbflp4vml7bpl7Tlkoznu5PmnZ/ml7bpl7RcbiAgZW50ZXJUaW1lOiBudW1iZXJcbiAgbGVhdmVUaW1lOiBudW1iZXIgPSAwXG4gIC8vIOS4iuasoeacgOWQjuS4gOasoeiuv+mXrlxuICBsYXN0VGltZTogbnVtYmVyID0gMFxuXG4gIGNvbnN0cnVjdG9yKGhvc3RuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIHRoaXMuaG9zdG5hbWUgPSBob3N0bmFtZVxuICAgIHRoaXMuZW50ZXJUaW1lID0gbm93XG4gIH1cblxuICBhc3luYyBoYW5kbGVFbnRlcigpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIHRoaXMuZW50ZXJUaW1lID0gbm93XG4gIH1cblxuICBhc3luYyBoYW5kbGVMZWF2ZSgpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIHRoaXMubGFzdFRpbWUgPSBub3dcbiAgICBjb25zdCBtaWxsaXNlY29uZHMgPSB0aGlzLmxhc3RUaW1lIC0gdGhpcy5lbnRlclRpbWVcbiAgICBjb25zdCBzZWNvbmRzID0gbWlsbGlzZWNvbmRzVG9TZWNvbmRzKG1pbGxpc2Vjb25kcylcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVN0b3JhZ2Uoc2Vjb25kcylcbiAgfVxuXG4gIGFzeW5jIGdldFN0b3JhZ2VUb3RhbFNlY29uZHMoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBIb3N0TGlmZSA9IGF3YWl0IHN0b3JhZ2VHZXQ8SG9zdExpZmVTdG9yYWdlPih0aGlzLmhvc3RuYW1lKVxuICAgIGlmIChIb3N0TGlmZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gICAgY29uc3QgeyB0b3RhbFNlY29uZHMgfSA9IEhvc3RMaWZlXG4gICAgcmV0dXJuIHRvdGFsU2Vjb25kc1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlU3RvcmFnZShzZWNvbmRzOiBudW1iZXIpIHtcbiAgICBjb25zdCBzZWNvbmRzU2F2ZSA9IGF3YWl0IHRoaXMuZ2V0U3RvcmFnZVRvdGFsU2Vjb25kcygpXG4gICAgY29uc3Qgc2Vjb25kc1VwZGF0ZSA9IHNlY29uZHNTYXZlICsgc2Vjb25kc1xuXG4gICAgc3RvcmFnZVNldDxIb3N0TGlmZVN0b3JhZ2U+KHRoaXMuaG9zdG5hbWUsIHtcbiAgICAgIGhvc3RuYW1lOiB0aGlzLmhvc3RuYW1lLFxuICAgICAgbGFzdFRpbWU6IHRoaXMubGFzdFRpbWUsXG4gICAgICB0b3RhbFNlY29uZHM6IHNlY29uZHNVcGRhdGVcbiAgICB9KVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0b3JhZ2VTZXQ8VD4oa2V5OiBzdHJpbmcsIHZhbDogVCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IFtrZXldOiB2YWwgfSwgKCkgPT4gcmVzb2x2ZSgnc3VjY2VzcycpKTtcbiAgfSlcbn1cblxuLyoqXG4gKiDojrflj5ZzdG9yYWdl55qE5YaF5a65XG4gKiBAcGFyYW0ga2V5IOacquS8oOWFpSx1bmRlZmluZWQ6IOi/lOWbnuaJgOaciXN0b3JhZ2VcbiAqIEBwYXJhbSBrZXkgc3RyaW5nOiDov5Tlm57mjIflrppob3N0bmFtZeeahHN0b3JhZ2Us5aaC5p6c5rKh5pyJLOi/lOWbnm51bGxcbiAqL1xuZnVuY3Rpb24gc3RvcmFnZUdldDxUPigpOiBQcm9taXNlPHsgW2sgaW4gc3RyaW5nXTogSG9zdExpZmUgfT5cbmZ1bmN0aW9uIHN0b3JhZ2VHZXQ8VD4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPFQgfCBudWxsPlxuYXN5bmMgZnVuY3Rpb24gc3RvcmFnZUdldDxUPihrZXk/OiBzdHJpbmcpOiBQcm9taXNlPFQgfCBudWxsIHwgeyBbayBpbiBzdHJpbmddOiBUIH0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoa2V5ID8/IG51bGwsIChyZXMpID0+IHtcbiAgICAgIC8vIOepuuWvueixoeWIpOaWrVxuICAgICAgaWYgKE9iamVjdC5rZXlzKHJlcykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJlc29sdmUobnVsbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICByZXNvbHZlKHJlc1trZXldKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdG9yYWdlQWxsKCkge1xuICByZXR1cm4gc3RvcmFnZUdldCgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhclN0b3JhZ2UoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuY2xlYXIoKCkgPT4ge1xuICAgICAgcmVzb2x2ZSgnY2xlYXIgc3VjY2VzcycpXG4gICAgfSk7XG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtaWxsaXNlY29uZHNUb1NlY29uZHMobWlsbGlzZWNvbmRzOiBudW1iZXIpIHtcbiAgcmV0dXJuIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSG9zdG5hbWUodXJsOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHByb3RvY29sLCBob3N0bmFtZSB9ID0gbmV3IFVSTCh1cmwpXG5cbiAgICAvLyDlj6rmlLbpm4ZodHRw5Y2P6K6u55qE572R56uZXG4gICAgaWYgKCFbJ2h0dHBzOicsICdodHRwJ10uaW5jbHVkZXMocHJvdG9jb2wpKSByZXR1cm4gbnVsbFxuXG4gICAgcmV0dXJuIGhvc3RuYW1lXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVcmxJbmZvKCk6IFByb21pc2U8e1xuICBob3N0bmFtZTogc3RyaW5nIHwgbnVsbFxuICB1cmw6IHN0cmluZyxcbn0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjaHJvbWUudGFicy5xdWVyeSh7IGFjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZSB9LCAodGFicykgPT4ge1xuICAgICAgbGV0IHVybCA9ICh0YWJzWzBdICYmIHRhYnNbMF0udXJsKSA/PyAnJ1xuICAgICAgY29uc3QgaG9zdG5hbWUgPSBwYXJzZUhvc3RuYW1lKHVybClcbiAgICAgIHJlc29sdmUoeyBob3N0bmFtZSwgdXJsIH0pXG4gICAgfSk7XG4gIH0pXG59IiwiaW1wb3J0IHsgY2xlYXJTdG9yYWdlLCBnZXRTdG9yYWdlQWxsLCBnZXRVcmxJbmZvLCBIb3N0TGlmZSB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbmltcG9ydCB7IHR5cGUgTWVzc2FnZSB9IGZyb20gJy4uL2FwaS9pbmRleCdcclxuXHJcblxyXG50eXBlIEhvc3ROYW1lID0gc3RyaW5nXHJcblxyXG5jb25zdCBob3N0TWFwOiB7XHJcbiAgW2hvc3RuYW1lIGluIEhvc3ROYW1lXTogSG9zdExpZmVcclxufSA9IHt9XHJcblxyXG5sZXQgaG9zdEN1cnJlbnQ6IEhvc3ROYW1lIHwgbnVsbCA9IG51bGxcclxuXHJcbi8qKlxyXG4gKiDlnKjmv4DmtLsv5pu05pawdGFiLOaXtizlnKjlvZPliY10YWIv5pawdGFi6Lez6L2s6aG16Z2iKOi3s+i9rOebuOWQjGhvc3RuYW1lL+S4jeWQjClcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUhvc3RMaWZlKCkge1xyXG4gIC8vIOaXp+WcsOWdgOabtOaWsFxyXG4gIGhvc3RDdXJyZW50ICYmIGhvc3RNYXBbaG9zdEN1cnJlbnRdPy5oYW5kbGVMZWF2ZSgpXHJcblxyXG4gIC8vIOaWsOWcsOWdgOabtOaWsCAvIOWIm+W7ulxyXG4gIGNvbnN0IHsgaG9zdG5hbWUgfSA9IGF3YWl0IGdldFVybEluZm8oKVxyXG4gIGlmIChob3N0bmFtZSAhPT0gbnVsbCkge1xyXG4gICAgaWYgKCFob3N0TWFwW2hvc3RuYW1lXSkge1xyXG4gICAgICBob3N0TWFwW2hvc3RuYW1lXSA9IG5ldyBIb3N0TGlmZShob3N0bmFtZSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGhvc3RNYXBbaG9zdG5hbWVdLmhhbmRsZUVudGVyKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOeJueauiue9keermeS5n+imgeiusOW9lVxyXG4gIGhvc3RDdXJyZW50ID0gaG9zdG5hbWVcclxufVxyXG5cclxuLyoqXHJcbiAqIOagh+etvumhtea/gOa0u1xyXG4gKiDop6blj5HmnaHku7Y6XHJcbiAqIDEuIOaWsOW7uuepuueZvemhtVxyXG4gKiAyLiDku47ljoblj7LorrDlvZUvdXJs55u05o6l5omT5byAXHJcbiAqL1xyXG5jaHJvbWUudGFicy5vbkFjdGl2YXRlZC5hZGRMaXN0ZW5lcihhc3luYyAoeyB0YWJJZCB9KSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ3RhYiBBY3RpdmUgICAnKTtcclxuICBhd2FpdCB1cGRhdGVIb3N0TGlmZSgpXHJcbn0pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDmoIfnrb7pobXnp7vpmaRcclxuICog6Kem5Y+R5p2h5Lu2OlxyXG4gKiAxLiDkvb/nlKjlhbPpl63mjInpkq7lhbPpl61cclxuICogMi4g5YWz6Zet5pW05Liq56qX5Y+jXHJcbiAqL1xyXG5jaHJvbWUudGFicy5vblJlbW92ZWQuYWRkTGlzdGVuZXIoYXN5bmMgKHRhYklkKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ3RhYiBSZW1vdmUgICcpO1xyXG5cclxuICBjb25zdCB7IGhvc3RuYW1lIH0gPSBhd2FpdCBnZXRVcmxJbmZvKClcclxuICBob3N0bmFtZSAmJiBob3N0TWFwW2hvc3RuYW1lXT8uaGFuZGxlTGVhdmUoKVxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiDmm7TmlrA6XHJcbiAqIOinpuWPkeadoeS7tjpcclxuICog6YCa6L+H5L+u5pS55Zyw5Z2A5qCPLOinpuWPkeeahOWcqOacrOagh+etvumhteeahOi3s+i9rFxyXG4gKi9cclxuY2hyb21lLnRhYnMub25VcGRhdGVkLmFkZExpc3RlbmVyKGFzeW5jICh0YWJJZCwgY2hhbmdlSW5mbywgdGFiKSA9PiB7XHJcbiAgaWYgKGNoYW5nZUluZm8uc3RhdHVzID09PSAnY29tcGxldGUnKSB7XHJcbiAgICBjb25zb2xlLmxvZygndGFiIFVwZGF0ZSAgJyk7XHJcblxyXG4gICAgYXdhaXQgdXBkYXRlSG9zdExpZmUoKVxyXG4gIH1cclxufSk7XHJcblxyXG5cclxuLy8g6YCa5L+hXHJcbmNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobWVzc2FnZTogTWVzc2FnZSwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpID0+IHtcclxuICBpZiAobWVzc2FnZS50eXBlID09PSAnZ2V0SG9zdE1hcCcpIHtcclxuICAgIHNlbmRSZXNwb25zZSh7IGRhdGE6IGhvc3RNYXAgfSlcclxuICB9XHJcblxyXG4gIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiZ2V0U3RvcmFnZVwiKSB7XHJcbiAgICBnZXRTdG9yYWdlQWxsKCkudGhlbihyZXMgPT4ge1xyXG4gICAgICBzZW5kUmVzcG9uc2UoeyBkYXRhOiByZXMgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBpZiAobWVzc2FnZS50eXBlID09PSBcImNsZWFyU3RvcmFnZVwiKSB7XHJcbiAgICBjbGVhclN0b3JhZ2UoKS50aGVuKHJlcyA9PiB7XHJcbiAgICAgIHNlbmRSZXNwb25zZSh7IGRhdGE6IFwic3VjY2Vzc1wiIH0pXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWVcclxufSk7Il0sIm5hbWVzIjpbIkhvc3RMaWZlIiwiaG9zdG5hbWUiLCJfX3B1YmxpY0ZpZWxkIiwibm93IiwibWlsbGlzZWNvbmRzIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kc1RvU2Vjb25kcyIsInN0b3JhZ2VHZXQiLCJ0b3RhbFNlY29uZHMiLCJzZWNvbmRzVXBkYXRlIiwic3RvcmFnZVNldCIsImtleSIsInZhbCIsInJlc29sdmUiLCJyZWplY3QiLCJyZXMiLCJnZXRTdG9yYWdlQWxsIiwiY2xlYXJTdG9yYWdlIiwicGFyc2VIb3N0bmFtZSIsInVybCIsInByb3RvY29sIiwiZ2V0VXJsSW5mbyIsInRhYnMiLCJob3N0TWFwIiwiaG9zdEN1cnJlbnQiLCJ1cGRhdGVIb3N0TGlmZSIsIl9hIiwidGFiSWQiLCJjaGFuZ2VJbmZvIiwidGFiIiwibWVzc2FnZSIsInNlbmRlciIsInNlbmRSZXNwb25zZSJdLCJtYXBwaW5ncyI6IjZMQU1PLE1BQU1BLENBQVMsQ0FRcEIsWUFBWUMsRUFBa0IsQ0FQOUJDLEVBQUEsaUJBRUFBLEVBQUEsa0JBQ0FBLEVBQUEsaUJBQW9CLEdBRXBCQSxFQUFBLGdCQUFtQixHQUdqQixNQUFNQyxFQUFNLElBQUksS0FBSyxFQUFFLFFBQVEsRUFDL0IsS0FBSyxTQUFXRixFQUNoQixLQUFLLFVBQVlFLENBQUEsQ0FHbkIsTUFBTSxhQUFjLENBQ2xCLE1BQU1BLEVBQU0sSUFBSSxLQUFLLEVBQUUsUUFBUSxFQUMvQixLQUFLLFVBQVlB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
